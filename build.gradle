plugins {
    id 'java'
    id 'uk.gov.hmcts.java' version '0.12.0'
    id 'com.jfrog.bintray' version '1.8.4'
    id "io.freefair.lombok" version "5.1.1"
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'net.ltgt.apt' version '0.18'
    // id 'pmd'
    id 'jacoco'
}


def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: getCurrentGitBranch()

group 'uk.gov.hmcts.reform.pcq'
// Do not change this version number
version buildNumber


sourceCompatibility = 1.11

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenLocal()
    jcenter()
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

task printVersion {
    doLast {
        print project.version
    }
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/pcq-commons"
    }
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task unit(type: Test, description: 'Runs the unit tests.', group: 'Verification') {
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    useJUnitPlatform()
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'pcq-commons'
            version project.version
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Main']
    publish = true
    pkg {
        repo = 'hmcts-maven'
        name = 'pcq-commons'
        userOrg = 'hmcts'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/hmcts/pcq-commons'
        version {
            name = project.version
        }
    }
}

def versions = [
        jupiter           : '5.3.2',
        lombok            : '1.18.8',
        springfoxSwagger  : '2.9.2',
        springBoot        : '2.3.4.RELEASE'
]

dependencies {
    compile group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.jupiter
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot

    testCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
    testImplementation('org.mockito:mockito-core:2.7.22')


}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
}

jar {
    enabled = true
}

def getCurrentGitBranch() {
    def gitBranch = "DEV-SNAPSHOT"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    return gitBranch
}